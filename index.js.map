{"version":3,"file":"index.js","sources":["source/utils.js","source/types/Array.js","source/types/Boolean.js","source/types/Date.js","source/types/Error.js","source/types/Function.js","source/types/Map.js","source/types/Number.js","source/types/Object.js","source/types/Set.js","source/types/String.js","source/types/Symbol.js","source/types/index.js","source/max-depth.js","source/data.js"],"sourcesContent":["// Assigned to an object, when rendering, if exists, will wrap content, like\n// Map{...} or Set[...]\nexport const CLASS_NAME_KEY = 'className';\nexport const MAX_FUNC_STR_LEN = 30;\n\nexport const setCustomClassNameTo = (data, className) =>\n  (data[CLASS_NAME_KEY] = className);\n\nexport const getCustomClassNameFrom = (data) => data[CLASS_NAME_KEY] || '';\n\nexport const canPassAsIs = (value) => typeof value === 'string';\n\nconst validKeyRgx = /^[\\w_$][\\w\\d_$]*$/i;\n\nexport const keyNeedsConversion = (key) =>\n  !(canPassAsIs(key) && validKeyRgx.test(key));\n\nexport const isNested = (value) => value && typeof value === 'object';\n\nexport const setNestedWraps = (value, pre, post) => {\n  value.pre = pre;\n  value.post = post;\n};\n\nexport const setNestedShortContent = (value, short) => {\n  value.short = short;\n};\n\nexport const isList = (target) => isNested(target) && target.type === 'list';\n\nexport const createList = () => ({\n  type: 'list',\n  values: [],\n  pre: '[',\n  post: ']',\n  short: '...',\n});\n\nexport const addToList = ({ values }, index, value) => (values[index] = value);\n\nexport const iterateList = ({ values }, handler) =>\n  values.forEach((value, index) => handler(value, index));\n\nexport const getListSize = ({ values }) => values.length;\n\nexport const isStorage = (target) =>\n  isNested(value) && target.type === 'storage';\n\nexport const createStorage = () => ({\n  type: 'storage',\n  keys: [],\n  values: [],\n  pre: '{',\n  post: '}',\n  short: '...',\n});\n\nexport const addToStorage = ({ keys, values }, key, value) => {\n  keys.push(key);\n  values.push(value);\n};\n\nexport const iterateStorage = (storage, handler) => {\n  const { keys, values } = storage;\n\n  keys.forEach((key, index) => handler(values[index], key));\n};\n\nexport const getStorageSize = ({ keys }) => keys.length;\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo, createList, addToList } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createList();\n\n  value.forEach((item, index) => {\n    addToList(result, index, convertValue(item));\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","export default (value) => `Date(${value})`;\n","import {\n  setCustomClassNameTo,\n  createStorage,\n  addToStorage,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const { name, message, columnNumber, fileName, lineNumber } = value;\n\n  const result = createStorage();\n\n  addToStorage(result, 'name', convertValue(name));\n  addToStorage(result, 'message', convertValue(message));\n  addToStorage(result, 'columnNumber', convertValue(columnNumber));\n  addToStorage(result, 'fileName', convertValue(fileName));\n  addToStorage(result, 'lineNumber', convertValue(lineNumber));\n\n  setCustomClassNameTo(result, name || 'Error');\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  MAX_FUNC_STR_LEN,\n  setCustomClassNameTo,\n  createStorage,\n  addToStorage,\n  setNestedWraps,\n  setNestedShortContent,\n} from '../utils';\n\nexport default (value) => {\n  const content = String(value);\n\n  if (content.length <= MAX_FUNC_STR_LEN) {\n    return content;\n  }\n\n  const type = getClassName(value) || 'Function';\n\n  let { name } = value;\n\n  if (!name) {\n    name = content\n      .replace(/\\s+/g, ' ')\n      .substr(content.substr(0, 9) === 'function ' ? 9 : 0, MAX_FUNC_STR_LEN);\n\n    if (content.length < MAX_FUNC_STR_LEN) {\n      name = `${name}...`;\n    }\n  }\n\n  const result = createStorage();\n  addToStorage(result, 'code', content);\n  setNestedWraps(result, '(', ')');\n  setNestedShortContent(result, name);\n  setCustomClassNameTo(result, type);\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  setCustomClassNameTo,\n  createStorage,\n  addToStorage,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createStorage();\n\n  value.forEach((item, key) => {\n    /*\n    Do not use keyNeedsConversion() here, because Map may hold values of\n    different types as keys and string should be quoted, otherwise it may be\n    unclear -- what you see string true or boolean true as key.\n    */\n    addToStorage(result, convertValue(key), convertValue(item));\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => `${value}`;\n","import { getClassName } from '@actualwave/get-class';\n\nimport {\n  setCustomClassNameTo,\n  createStorage,\n  addToStorage,\n  keyNeedsConversion,\n} from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createStorage();\n\n  Object.keys(value).forEach((key) => {\n    addToStorage(\n      result,\n      keyNeedsConversion(key) ? convertValue(key) : key,\n      convertValue(value[key]),\n    );\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","import { getClassName } from '@actualwave/get-class';\n\nimport { setCustomClassNameTo, createList, addToList } from '../utils';\n\nexport default (value, convertValue) => {\n  const result = createList();\n  // remove need in indexes for Set\n  let index = 0;\n\n  value.forEach((item) => {\n    addToList(result, index++, convertValue(item));\n  });\n\n  setCustomClassNameTo(result, getClassName(value));\n\n  return result;\n};\n","export default (value) => JSON.stringify(value);\n","export default (value) => String(value);\n","import getClass from '@actualwave/get-class';\n\nimport convertArray from './Array';\nimport convertBoolean from './Boolean';\nimport convertDate from './Date';\nimport convertError from './Error';\nimport convertFunction from './Function';\nimport convertMap from './Map';\nimport convertNumber from './Number';\nimport convertObject from './Object';\nimport convertSet from './Set';\nimport convertString from './String';\nimport convertSymbol from './Symbol';\n\n// Every value in JS has .constructor property\n// use Map to store handlers for every type in this case every\n// handler could be replaced and customizable\n\nconst types = new Map();\n\n/**\n * Type handler signature func(value:*, convertType:(value:*)): String|Array|Object;\n * @param {*} constructor\n * @param {*} handler\n */\nexport const addTypeHandler = (constructor, handler) => {\n  if (constructor && handler) {\n    types.delete(constructor);\n    types.set(constructor, handler);\n  }\n};\n\nexport const hasTypeHandler = (constructor) => types.has(constructor);\n\nexport const getTypeHandler = (constructor) => types.get(constructor);\n\nexport const removeTypeHandler = (constructor) => types.delete(constructor);\n\nexport const defaultTypeHandlerSelector = (value) => {\n  const type = getClass(value);\n\n  return type && getTypeHandler(type);\n};\n\nlet typeHandlerSelector = defaultTypeHandlerSelector;\n\n/*\n * Used to get type handler instead of getTypeHandler(), can be customized.\n * @param {*} value\n */\nexport const selectTypeHandler = (value) => typeHandlerSelector(value);\n\n/**\n * Used to customize type selection algorythm, by default it just gets current\n * constructor value and looks for its handler.\n * @param {*} newSelector\n */\nexport const setTypeHandlerSelector = (newSelector) => {\n  typeHandlerSelector = newSelector;\n};\n\naddTypeHandler(Array, convertArray);\naddTypeHandler(Boolean, convertBoolean);\naddTypeHandler(Date, convertDate);\naddTypeHandler(Error, convertError);\naddTypeHandler(Function, convertFunction);\naddTypeHandler(Map, convertMap);\naddTypeHandler(Number, convertNumber);\naddTypeHandler(Object, convertObject);\naddTypeHandler(Set, convertSet);\naddTypeHandler(String, convertString);\naddTypeHandler(Symbol, convertSymbol);\n","import { singleValueFactory } from '@actualwave/closure-value';\r\n\r\nexport const {\r\n  get: getMaxNesingDepth,\r\n  set: setMaxNesingDepth,\r\n} = singleValueFactory(2);\r\n","import convertArray from './types/Array';\nimport convertBoolean from './types/Boolean';\nimport convertDate from './types/Date';\nimport convertError from './types/Error';\nimport convertFunction from './types/Function';\nimport convertMap from './types/Map';\nimport convertNumber from './types/Number';\nimport convertObject from './types/Object';\nimport convertSet from './types/Set';\nimport convertString from './types/String';\nimport convertSymbol from './types/Symbol';\n\nimport { getMaxNesingDepth } from './max-depth';\n\nimport { selectTypeHandler } from './types';\n\nexport const isString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n    case 'string':\n    case 'boolean':\n    case 'number':\n    case 'undefined':\n      return true;\n    default:\n      return value === null || value instanceof Date;\n  }\n};\n\nexport const toString = (value) => {\n  switch (typeof value) {\n    case 'symbol':\n      return convertSymbol(value);\n    case 'string':\n      return convertString(value);\n    case 'boolean':\n      return convertBoolean(value);\n    case 'number':\n      return convertNumber(value);\n    default:\n      if (value instanceof Date) {\n        return convertDate(value);\n      }\n\n      return `${value}`;\n  }\n};\n\nconst fallbackConversion = (value, convertValue, refs) => {\n  if (isString(value)) {\n    return toString(value);\n  }\n\n  if (value instanceof Function) {\n    return convertFunction(value, convertValue, refs);\n  }\n\n  if (value instanceof Error) {\n    return convertError(value, convertValue, refs);\n  }\n\n  if (value instanceof Map) {\n    return convertMap(value, convertValue, refs);\n  }\n\n  if (value instanceof Set) {\n    return convertSet(value, convertValue, refs);\n  }\n\n  if (value instanceof Array) {\n    return convertArray(value, convertValue, refs);\n  }\n\n  return convertObject(value, convertValue, refs);\n};\n\nexport const convert = (value, level = 1, refs = new Map()) => {\n  if (value === null || value === undefined) {\n    return `${value}`;\n  }\n\n  const maxLevel = getMaxNesingDepth();\n\n  if (level > maxLevel) {\n    return toString(value);\n  }\n\n  const complex = !isString(value);\n\n  if (complex && refs.has(value)) {\n    return refs.get(value);\n  }\n\n  const handler = selectTypeHandler(value);\n  const nextConvert = (propValue) => convert(propValue, level + 1, refs);\n  let result;\n\n  if (handler) {\n    result = handler(value, nextConvert, refs);\n  }\n\n  result = fallbackConversion(value, nextConvert, refs);\n\n  if (complex) {\n    refs.set(value, result);\n  }\n\n  return result;\n};\n"],"names":["CLASS_NAME_KEY","MAX_FUNC_STR_LEN","setCustomClassNameTo","data","className","getCustomClassNameFrom","canPassAsIs","value","validKeyRgx","keyNeedsConversion","key","test","isNested","setNestedWraps","pre","post","setNestedShortContent","short","isList","target","type","createList","values","addToList","index","iterateList","handler","forEach","getListSize","length","isStorage","createStorage","keys","addToStorage","push","iterateStorage","storage","getStorageSize","convertValue","result","item","getClassName","name","message","columnNumber","fileName","lineNumber","content","String","replace","substr","Object","JSON","stringify","types","Map","addTypeHandler","constructor","delete","set","hasTypeHandler","has","getTypeHandler","get","removeTypeHandler","defaultTypeHandlerSelector","getClass","typeHandlerSelector","selectTypeHandler","setTypeHandlerSelector","newSelector","Array","convertArray","Boolean","convertBoolean","Date","convertDate","Error","convertError","Function","convertFunction","convertMap","Number","convertNumber","convertObject","Set","convertSet","convertString","Symbol","convertSymbol","getMaxNesingDepth","setMaxNesingDepth","singleValueFactory","isString","toString","fallbackConversion","refs","convert","level","undefined","maxLevel","complex","nextConvert","propValue"],"mappings":"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"}